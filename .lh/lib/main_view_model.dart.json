{
    "sourceFile": "lib/main_view_model.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1722296029817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722296067747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n   bool _registered = false;\n   bool _ongoingInvitation = false;\n   bool _ongoingCall = false;\n-  bool _ongoingCall = false;\n+  bool callFromPush = false;\n   bool _isCallFromPush = false;\n   bool _speakerPhone = true;\n   IncomingInviteParams? _incomingInvite;\n \n"
                },
                {
                    "date": 1722346686404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n           {\n             observeCurrentCall();\n             _ongoingInvitation = true;\n             _incomingInvite = message.message.inviteParams;\n+                      showNotification(message)\n             logger.i(\n                 \"customheaders :: ${message.message.dialogParams?.customHeaders}\");\n             print(\"invite received ::  SocketMethod.INVITE\");\n \n@@ -204,16 +205,43 @@\n     if (_incomingInvite != null) {\n       _telnyxClient.acceptCall(\n           _incomingInvite!, _localName, _localNumber, \"State\");\n \n+      // only for iOS\n       FlutterCallkitIncoming.setCallConnected(_incomingInvite!.callID!);\n \n       notifyListeners();\n     } else {\n       throw ArgumentError(_incomingInvite);\n     }\n   }\n \n+   void showNotification(IncomingInviteParams message) {\n+\n+    CallKitParams callKitParams = CallKitParams(\n+      id: message.callID,\n+      nameCaller: message.callerIdName,\n+      appName: 'Telnyx Flutter Voice',\n+      avatar: 'https://i.pravatar.cc/100',\n+      handle: message.callerIdNumber,\n+      type: 0,\n+      textAccept: 'Accept',\n+      textDecline: 'Decline',\n+      missedCallNotification: const NotificationParams(\n+        showNotification: true,\n+        isShowCallback: true,\n+        subtitle: 'Missed call',\n+        callbackText: 'Call back',\n+      ),\n+      duration: 30000,\n+      extra: {},\n+      headers: <String, dynamic>{'platform': 'flutter'}\n+    );\n+\n+\n+    FlutterCallkitIncoming.showCallkitIncoming(callKitParams);\n+  }\n+\n   void endCall() {\n     if (!Platform.isAndroid && _incomingInvite != null) {\n       FlutterCallkitIncoming.endCall(\n           currentCall?.callId ?? _incomingInvite!.callID!);\n"
                }
            ],
            "date": 1722296029817,
            "name": "Commit-0",
            "content": "import 'dart:io';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter_callkit_incoming/entities/android_params.dart';\nimport 'package:flutter_callkit_incoming/entities/call_kit_params.dart';\nimport 'package:flutter_callkit_incoming/entities/notification_params.dart';\nimport 'package:flutter_callkit_incoming/flutter_callkit_incoming.dart';\nimport 'package:fluttertoast/fluttertoast.dart';\nimport 'package:logger/logger.dart';\nimport 'package:telnyx_flutter_webrtc/service/notification_service.dart';\nimport 'package:telnyx_webrtc/call.dart';\nimport 'package:telnyx_webrtc/config/telnyx_config.dart';\nimport 'package:telnyx_webrtc/model/socket_method.dart';\nimport 'package:telnyx_webrtc/model/telnyx_message.dart';\nimport 'package:telnyx_webrtc/model/telnyx_socket_error.dart';\nimport 'package:telnyx_webrtc/model/verto/receive/received_message_body.dart';\nimport 'package:telnyx_webrtc/telnyx_client.dart';\nimport 'package:telnyx_webrtc/model/push_notification.dart';\nimport 'package:telnyx_webrtc/model/call_state.dart';\n\nclass MainViewModel with ChangeNotifier {\n  final logger = Logger();\n  //\"assets/audios/ringback.mp3\"\n  final TelnyxClient _telnyxClient = TelnyxClient();\n\n  bool _registered = false;\n  bool _ongoingInvitation = false;\n  bool _ongoingCall = false;\n    bool _ongoingCall = false;\n  bool _isCallFromPush = false;\n  bool _speakerPhone = true;\n  IncomingInviteParams? _incomingInvite;\n\n  String _localName = '';\n  String _localNumber = '';\n\n  bool get registered {\n    return _registered;\n  }\n\n  bool get ongoingInvitation {\n    return _ongoingInvitation;\n  }\n\n  bool get ongoingCall {\n    return _ongoingCall;\n  }\n\n  Call? get currentCall {\n    return  _telnyxClient.calls.values.firstOrNull;\n  }\n\n  IncomingInviteParams? get incomingInvitation {\n    return _incomingInvite;\n  }\n\n  void observeCurrentCall() {\n    currentCall?.callHandler.onCallStateChanged = (CallState state) {\n      logger.i(\"Call State :: $state\");\n      switch (state) {\n\n        case CallState.newCall:\n          // TODO: Handle this case.\n          break;\n        case CallState.connecting:\n          // TODO: Handle this case.\n          break;\n        case CallState.ringing:\n          // TODO: Handle this case.\n          break;\n        case CallState.active:\n          print(\"current call is Active\");\n          // TODO: Handle this case.\n          _ongoingInvitation = false;\n          _ongoingCall = true;\n          break;\n        case CallState.held:\n          // TODO: Handle this case.\n          break;\n        case CallState.done:\n          // TODO: Handle this case.\n          break;\n        case CallState.error:\n          // TODO: Handle this case.\n          break;\n      }\n    };\n\n\n  }\n\n  void observeResponses() {\n    // Observe Socket Messages Received\n    _telnyxClient.onSocketMessageReceived = (TelnyxMessage message) {\n      switch (message.socketMethod) {\n        case SocketMethod.CLIENT_READY:\n          {\n            _registered = true;\n            break;\n          }\n        case SocketMethod.INVITE:\n          {\n            observeCurrentCall();\n            _ongoingInvitation = true;\n            _incomingInvite = message.message.inviteParams;\n            logger.i(\n                \"customheaders :: ${message.message.dialogParams?.customHeaders}\");\n            print(\"invite received ::  SocketMethod.INVITE\");\n\n            break;\n          }\n        case SocketMethod.ANSWER:\n          {\n            _ongoingCall = true;\n            break;\n          }\n        case SocketMethod.BYE:\n          {\n            _ongoingInvitation = false;\n            _ongoingCall = false;\n            break;\n          }\n      }\n      notifyListeners();\n    };\n\n    // Observe Socket Error Messages\n    _telnyxClient.onSocketErrorReceived = (TelnyxSocketError error) {\n      print(\"Error Received :: ${error.errorCode} : ${error.errorMessage}\");\n      Fluttertoast.showToast(\n        msg: \"${error.errorCode} : ${error.errorMessage}\",\n        toastLength: Toast.LENGTH_SHORT,\n        gravity: ToastGravity.BOTTOM,\n        timeInSecForIosWeb: 1,\n      );\n      switch (error.errorCode) {\n        case -32000:\n          {\n            //Todo handle token error\n            break;\n          }\n        case -32001:\n          {\n            //Todo handle credential error\n            break;\n          }\n        case -32003:\n          {\n            //Todo handle gateway timeout error\n            break;\n          }\n        case -32004:\n          {\n            //ToDo hande gateway failure error\n            break;\n          }\n      }\n      notifyListeners();\n    };\n  }\n\n  void connect() {\n    _telnyxClient.connect();\n  }\n\n  void showNotification(IncomingInviteParams message) {\n\n    CallKitParams callKitParams = CallKitParams(\n      id: message.callID,\n      nameCaller: message.callerIdName,\n      appName: 'Telnyx Flutter Voice',\n      avatar: 'https://i.pravatar.cc/100',\n      handle: message.callerIdNumber,\n      type: 0,\n      textAccept: 'Accept',\n      textDecline: 'Decline',\n      missedCallNotification: const NotificationParams(\n        showNotification: true,\n        isShowCallback: true,\n        subtitle: 'Missed call',\n        callbackText: 'Call back',\n      ),\n      duration: 30000,\n      extra: {},\n      headers: <String, dynamic>{'platform': 'flutter'},\n      android: const AndroidParams(\n          isCustomNotification: true,\n          isShowLogo: false,\n          ringtonePath: 'system_ringtone_default',\n          backgroundColor: '#0955fa',\n          backgroundUrl: 'https://i.pravatar.cc/500',\n          actionColor: '#4CAF50',\n          textColor: '#ffffff',\n          incomingCallNotificationChannelName: \"Incoming Call\",\n          missedCallNotificationChannelName: \"Missed Call\"),\n    );\n\n\n    FlutterCallkitIncoming.showCallkitIncoming(callKitParams);\n  }\n\n  void handlePushNotification(PushMetaData pushMetaData,\n      CredentialConfig? credentialConfig, TokenConfig? tokenConfig) {\n    _telnyxClient.handlePushNotification(\n        pushMetaData, credentialConfig, tokenConfig);\n  }\n\n  void disconnect() {\n    _telnyxClient.disconnect();\n    _registered = false;\n    notifyListeners();\n  }\n\n  void login(CredentialConfig credentialConfig) {\n    _localName = credentialConfig.sipCallerIDName;\n    _localNumber = credentialConfig.sipCallerIDNumber;\n    _telnyxClient.credentialLogin(credentialConfig);\n  }\n\n  void loginWithToken(TokenConfig tokenConfig) {\n    _localName = tokenConfig.sipCallerIDName;\n    _localNumber = tokenConfig.sipCallerIDNumber;\n    _telnyxClient.tokenLogin(tokenConfig);\n  }\n\n  void call(String destination) {\n    _telnyxClient.newInvite(\n        _localName, _localNumber, destination, \"Fake State\",\n        customHeaders: {\"X-Header-1\": \"Value1\", \"X-Header-2\": \"Value2\"});\n   observeCurrentCall();\n  }\n\n  void toggleSpeakerPhone() {\n    _speakerPhone = !_speakerPhone;\n    currentCall?.enableSpeakerPhone(_speakerPhone);\n    notifyListeners();\n  }\n\n  void accept() {\n\n    if (_incomingInvite != null) {\n       _telnyxClient.acceptCall(_incomingInvite!, _localName, _localNumber, \"State\");\n      notifyListeners();\n    } else {\n      throw ArgumentError(_incomingInvite);\n    }\n  }\n\n  void endCall() {\n    if(!Platform.isAndroid){\n      FlutterCallkitIncoming.endCall(currentCall?.callId ?? \"\");\n    }\n\n    currentCall?.endCall(_incomingInvite?.callID);\n\n    _ongoingInvitation = false;\n    _ongoingCall = false;\n    notifyListeners();\n  }\n\n  void dtmf(String tone) {\n    _telnyxClient.call.dtmf(_telnyxClient.call.callId, tone);\n  }\n\n  void muteUnmute() {\n    _telnyxClient.call.onMuteUnmutePressed();\n  }\n\n  void holdUnhold() {\n    _telnyxClient.call.onHoldUnholdPressed();\n  }\n}\n"
        }
    ]
}