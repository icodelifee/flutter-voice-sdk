{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1722295310467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722296410712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,10 @@\n         // TODO: Handle this case.\n         break;\n     }\n   });\n+          mainViewModel.callFromPush = true;\n+\n }\n \n @pragma('vm:entry-point')\n Future<void> main() async {\n@@ -157,8 +159,9 @@\n       FirebaseMessaging.onMessage.listen((RemoteMessage message) {\n         logger.i('OnMessage :: Notification Message: ${message.data}');\n         TelnyxClient.setPushMetaData(message.data);\n         NotificationService.showNotification(message);\n+        mainViewModel.callFromPush = true;\n       });\n       FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {\n         print('onMessageOpenedApp :: Notification Message: ${message.data}');\n       });\n"
                },
                {
                    "date": 1722296675794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'dart:convert';\n+import 'dart:io';\n \n import 'package:firebase_core/firebase_core.dart';\n import 'package:firebase_messaging/firebase_messaging.dart';\n import 'package:flutter/foundation.dart';\n@@ -182,8 +183,11 @@\n     FlutterCallkitIncoming.onEvent.listen((CallEvent? event) async {\n       switch (event!.event) {\n         case Event.actionCallIncoming:\n           // retrieve the push metadata from extras\n+          if (Platform.isAndroid) {\n+            \n+          }\n           final data = await TelnyxClient.getPushData();\n           if (data != null) {\n             handlePush(data);\n           } else {\n"
                }
            ],
            "date": 1722295310467,
            "name": "Commit-0",
            "content": "import 'dart:convert';\n\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_callkit_incoming/entities/call_event.dart';\nimport 'package:flutter_callkit_incoming/flutter_callkit_incoming.dart';\nimport 'package:telnyx_flutter_webrtc/main_view_model.dart';\nimport 'package:telnyx_flutter_webrtc/service/notification_service.dart';\nimport 'package:telnyx_flutter_webrtc/view/screen/call_screen.dart';\nimport 'package:telnyx_flutter_webrtc/view/screen/home_screen.dart';\nimport 'package:telnyx_flutter_webrtc/view/screen/login_screen.dart';\nimport 'package:logger/logger.dart';\nimport 'package:provider/provider.dart';\nimport 'package:telnyx_webrtc/model/push_notification.dart';\nimport 'package:telnyx_webrtc/config/telnyx_config.dart';\nimport 'package:telnyx_webrtc/telnyx_client.dart';\nimport 'package:telnyx_webrtc/model/telnyx_message.dart';\nimport 'package:telnyx_webrtc/model/socket_method.dart';\n\nfinal logger = Logger();\nfinal mainViewModel = MainViewModel();\n// Android Only - Push Notifications\n@pragma('vm:entry-point')\nFuture _firebaseMessagingBackgroundHandler(RemoteMessage message) async {\n  await Firebase.initializeApp();\n  print('Handling a background message ${message.toMap().toString()}');\n  print(\"priority ${message.data.toString()}\");\n  NotificationService.showNotification(message);\n  FlutterCallkitIncoming.onEvent.listen((CallEvent? event) async {\n    switch (event!.event) {\n      case Event.actionCallIncoming:\n        logger.i('actionCallIncoming :: Received Incoming Call! from background');\n        break;\n      case Event.actionCallStart:\n      // TODO: Handle this case.\n        break;\n      case Event.actionCallAccept:\n        print(\"Accepted Call from Push Notification\");\n        TelnyxClient.setPushMetaData(\n            message.data, isAnswer: true, isDecline: false);\n        break;\n      case Event.actionCallDecline:\n        /*\n        * When the user declines the call from the push notification, the app will no longer be visible, and we have to\n        * handle the endCall user here.\n        *\n        * */\n        print(\"Decline Call from Push Notification\");\n        String? token;\n        PushMetaData? pushMetaData;\n        final telnyxClient = TelnyxClient();\n\n        telnyxClient.onSocketMessageReceived = (TelnyxMessage message) {\n          switch (message.socketMethod) {\n\n            case SocketMethod.BYE:\n              {\n                //make sure to disconnect the telnyxclient on Bye for Decline\n                print(\"telnyxClient disconnected\");\n                telnyxClient.disconnect();\n                break;\n              }\n            default:\n              logger.i('TelnyxClient :: onSocketMessageReceived   $message');\n          }\n          logger.i('TelnyxClient :: onSocketMessageReceived : $message');\n        };\n\n        pushMetaData =\n            PushMetaData.fromJson(jsonDecode(message.data[\"metadata\"]!));\n        //set the pushMetaData to decline\n        pushMetaData.isDecline = true;\n\n        if (defaultTargetPlatform == TargetPlatform.android) {\n          token = (await FirebaseMessaging.instance.getToken())!;\n\n          logger.i(\"Android notification token :: $token\");\n        } else if (defaultTargetPlatform == TargetPlatform.iOS) {\n          token = await FlutterCallkitIncoming.getDevicePushTokenVoIP();\n\n          logger.i(\"iOS notification token :: $token\");\n        }\n        var credentialConfig = CredentialConfig(\"isaac33882\", \"Iamtooold\",\n            \"<caller_id>\", \"<caller_number>\", token, true, \"\", \"\");\n        telnyxClient.handlePushNotification(pushMetaData, credentialConfig, null);\n        break;\n      case Event.actionDidUpdateDevicePushTokenVoip:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallEnded:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallTimeout:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallCallback:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallToggleHold:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallToggleMute:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallToggleDmtf:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallToggleGroup:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallToggleAudioSession:\n        // TODO: Handle this case.\n        break;\n      case Event.actionCallCustom:\n        // TODO: Handle this case.\n        break;\n    }});\n\n}\n\n@pragma('vm:entry-point')\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  if (defaultTargetPlatform == TargetPlatform.android) {\n    // Android Only - Push Notifications\n    await Firebase.initializeApp();\n    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);\n\n    await FirebaseMessaging.instance\n        .setForegroundNotificationPresentationOptions(\n      alert: true,\n      badge: true,\n      sound: true,\n    );\n  }\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n   void initState()  {\n    super.initState();\n\n    if (defaultTargetPlatform == TargetPlatform.android) {\n      // Android Only - Push Notifications\n      FirebaseMessaging.onMessage.listen((RemoteMessage message) {\n        logger.i('OnMessage :: Notification Message: ${message.data}');\n        TelnyxClient.setPushMetaData(message.data);\n        NotificationService.showNotification(message);\n      });\n      FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {\n        print('onMessageOpenedApp :: Notification Message: ${message.data}');\n\n      });\n    }\n\n    TelnyxClient.getPushData().then((data) {\n\n      // whenever you open the app from the terminate state by clicking on Notification message,\n      if (data != null) {\n        handlePush(data);\n        mainViewModel.observeResponses();\n        print(\"getPushData : getInitialMessage :: Notification Message: $data\");\n      }else{\n        mainViewModel.connect();\n        mainViewModel.observeResponses();\n        print(\"getPushData : No data\");\n      }\n\n    });\n\n\n\n\n    FlutterCallkitIncoming.onEvent.listen((CallEvent? event) async {\n      switch (event!.event) {\n        case Event.actionCallIncoming:\n          // retrieve the push metadata from extras\n          final data = await TelnyxClient.getPushData();\n          if (data != null){\n            handlePush(data);\n          }else {\n            logger.i('actionCallIncoming :: Push Data is null!');\n          }\n          break;\n        case Event.actionCallStart:\n          // TODO: started an outgoing call\n          // TODO: show screen calling in Flutter\n          break;\n        case Event.actionCallAccept:\n         mainViewModel.accept();\n         print(\"Accepted Call\");\n          break;\n        case Event.actionCallDecline:\n          mainViewModel.endCall();\n          logger.i(\"actionCallDecline :: call declined\");\n          break;\n        case Event.actionCallEnded:\n          mainViewModel.endCall();\n          print(\"Decline Call\");\n          break;\n        case Event.actionCallTimeout:\n          mainViewModel.endCall();\n          print(\"Decline Call\");\n          break;\n        case Event.actionCallCallback:\n          // TODO: only Android - click action `Call back` from missed call notification\n          break;\n        case Event.actionCallToggleHold:\n          // TODO: only iOS\n          break;\n        case Event.actionCallToggleMute:\n          // TODO: only iOS\n          break;\n        case Event.actionCallToggleDmtf:\n          // TODO: only iOS\n          break;\n        case Event.actionCallToggleGroup:\n          // TODO: only iOS\n          break;\n        case Event.actionCallToggleAudioSession:\n          // TODO: only iOS\n          break;\n        case Event.actionDidUpdateDevicePushTokenVoip:\n          // TODO: only iOS\n          break;\n        case Event.actionCallCustom:\n          // TODO: for custom action\n          break;\n      }\n    });\n  }\n\n  Future<void> handlePush(Map<String,dynamic> data) async {\n    String? token;\n    print(\"Encoded\" + jsonEncode(data));\n\n    PushMetaData? pushMetaData;\n    if (defaultTargetPlatform == TargetPlatform.android) {\n      token = (await FirebaseMessaging.instance.getToken())!;\n      pushMetaData =\n          PushMetaData.fromJson(data);\n      logger.i(\"Android notification token :: $token\");\n    } else if (defaultTargetPlatform == TargetPlatform.iOS) {\n      token = await FlutterCallkitIncoming.getDevicePushTokenVoIP();\n      pushMetaData =\n          PushMetaData.fromJson(data);\n      logger.i(\"iOS notification token :: $token\");\n    }\n    var credentialConfig = CredentialConfig(\"<Username>\", \"<Password>\",\n        \"<caller_id>\", \"<caller_number>\", token, true, \"\", \"\");\n    mainViewModel.handlePushNotification(pushMetaData!, credentialConfig, null);\n    mainViewModel.observeResponses();\n    logger.i('actionCallIncoming :: Received Incoming Call! Handle Push');\n  }\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        ChangeNotifierProvider.value(value: mainViewModel),\n      ],\n      child: MaterialApp(\n        title: 'Telnyx WebRTC',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        initialRoute: '/',\n        routes: {\n          '/': (context) => const LoginScreen(title: 'Telnyx Login'),\n          '/home': (context) => const HomeScreen(title: 'Home'),\n          '/call': (context) => const CallScreen(title: 'Ongoing Call'),\n        },\n      ),\n    );\n  }\n}\n"
        }
    ]
}